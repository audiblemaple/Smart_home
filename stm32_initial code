// Define the pin numbers according to your hardware setup
const int APP_ctl_Pin = X; // Replace X with actual pin number for APP_ctl
const int Switch_ctl_Pin = Y; // Replace Y with actual pin number for Switch_ctl
const int light_state_Pin = Z; // Replace Z with actual pin number for light_state

void setup() {
  // Initialize the GPIO pins
  pinMode(APP_ctl_Pin, INPUT);
  pinMode(Switch_ctl_Pin, INPUT);
  pinMode(light_state_Pin, OUTPUT);
}

void loop() {
  static int state = 1; // Start at State 1

  // Read the state of the input pins
  int A = digitalRead(APP_ctl_Pin);
  int S = digitalRead(Switch_ctl_Pin);

  // State machine logic
  switch (state) {
    case 1:
      if (A && !S) {
        state = 2;
        digitalWrite(light_state_Pin, HIGH); // L=1
      } else if (!A && S) {
        state = 3;
        digitalWrite(light_state_Pin, HIGH); // L=1
      }
      break;

    case 2:
      if (!A) {
        state = 1;
        digitalWrite(light_state_Pin, LOW); // L=0
      } else if (S) {
        state = 4;
        // L is already 0, no need to change
      }
      break;

    case 3:
      if (!S) {
        state = 1;
        digitalWrite(light_state_Pin, LOW); // L=0
      } else if (A) {
        state = 4;
        // L is already 0, no need to change
      }
      break;

    case 4:
      if (!A) {
        state = 3;
        digitalWrite(light_state_Pin, HIGH); // L=1
      } else if (!S) {
        state = 2;
        digitalWrite(light_state_Pin, HIGH); // L=1
      }
      break;

    default:
      // Handle unexpected state
      state = 1; // Reset to State 1
      digitalWrite(light_state_Pin, LOW); // Assuming default light state should be off
      break;
  }

  // You can add a small delay to debounce inputs if necessary
  delay(50);
}
